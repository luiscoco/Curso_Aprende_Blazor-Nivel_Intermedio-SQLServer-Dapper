@page "/products"
@using BlazorWebAppWithDapper.Data
@inject ProductsRepository ProductsRepo

<h3>Product List</h3>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Price</th>
                <th>Quantity</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.ProductName</td>
                    <td>@product.Price</td>
                    <td>@product.Quantity</td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Fetch product by ID -->
<h4>Fetch Product By ID</h4>
<input type="number" @bind-value="productId" placeholder="Enter Product ID" />
<button class="btn btn-primary" @onclick="GetProductById">Fetch Product</button>
@if (singleProduct != null)
{
    <div>
        <p><strong>Product Name:</strong> @singleProduct.ProductName</p>
        <p><strong>Price:</strong> @singleProduct.Price</p>
        <p><strong>Quantity:</strong> @singleProduct.Quantity</p>
    </div>
}

<!-- Insert new product -->
<h4>Insert New Product</h4>
<div>
    <input type="text" @bind-value="newProductName" placeholder="Product Name" />
    <input type="number" @bind-value="newProductPrice" placeholder="Price" />
    <input type="number" @bind-value="newProductQuantity" placeholder="Quantity" />
    <button class="btn btn-success" @onclick="InsertNewProduct">Insert Product</button>
</div>

<!-- Update existing product -->
<h4>Update Existing Product</h4>
<div>
    <input type="number" @bind-value="updateProductId" placeholder="Product ID" />
    <input type="text" @bind-value="updateProductName" placeholder="Product Name" />
    <input type="number" @bind-value="updateProductPrice" placeholder="Price" />
    <input type="number" @bind-value="updateProductQuantity" placeholder="Quantity" />
    <button class="btn btn-warning" @onclick="UpdateProduct">Update Product</button>
</div>

@code {
    private IEnumerable<Product> products;
    private Product singleProduct;
    private int productId;

    private string newProductName;
    private decimal newProductPrice;
    private int newProductQuantity;

    private int updateProductId;
    private string updateProductName;
    private decimal updateProductPrice;
    private int updateProductQuantity;

    // Load all products when the page initializes
    protected override async Task OnInitializedAsync()
    {
        products = await ProductsRepo.GetAllProductsAsync();
    }

    // Fetch a product by ID
    private async Task GetProductById()
    {
        singleProduct = await ProductsRepo.GetProductByIdAsync(productId);
    }

    // Insert a new product
    private async Task InsertNewProduct()
    {
        var product = new Product
            {
                ProductName = newProductName,
                Price = newProductPrice,
                Quantity = newProductQuantity
            };

        await ProductsRepo.InsertProductAsync(product);
        products = await ProductsRepo.GetAllProductsAsync(); // Refresh the list after insertion
    }

    // Update an existing product
    private async Task UpdateProduct()
    {
        var product = new Product
            {
                ProductId = updateProductId,
                ProductName = updateProductName,
                Price = updateProductPrice,
                Quantity = updateProductQuantity
            };

        await ProductsRepo.UpdateProductAsync(product);
        products = await ProductsRepo.GetAllProductsAsync(); // Refresh the list after update
    }
}
